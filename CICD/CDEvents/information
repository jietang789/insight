介绍：
CDEvents 是持续交付事件的通用规范，可在整个软件生产生态系统中实现互操作性


github：
https://github.com/cdevents/spec

官网：
https://cdevents.dev/

标签：
shell，CDF孵化项目

特点：

设计思考： 
CDEvents 如何使工具能够以可互操作的方式进行通信？
通过创建一种语言，我们定义了工具和服务如何就 CI/CD 系统中的事件相互通信。由于这种语言不依赖于特定工具，因此它为交流提供了中立的基础。

使用这种语言，我们定义了一组具有目的和语义意义的事件。使用这种定义明确的语言，工具知道要发送什么事件，接收者知道如何解释接收到的信息。这使工具能够对事件中发送的信息有一个共同的理解。

该语言能够创建一个工具生态系统，用于使用我们的事件进行监控、跟踪、测量和编排，而无需为每个工具编写“插件”。


解决的问题：


持续交付核心事件：
注意：这是一个正在进行中的草稿版本，正在由 Events SIG 的成员进行工作。非常欢迎您加入工作和讨论！

持续交付与需要存在的活动和编排相关，以便能够确定性地和持续地向用户交付软件。

在持续交付的上下文中，管道是对构建、测试、打包、发布和部署软件工件所需执行的一组任务的定义。可以多次实例化管道，例如构建同一工件的不同版本。我们将此实例称为 PipelineRun。它将有一个唯一的 ID，它将帮助我们跟踪特定软件工件的构建和发布进度。

由于 Pipelines 的动态特性，大多数实际工作需要排队以分布式方式发生，因此添加了排队事件。如果这些事件不适用于他们的用例，采用者可以选择忽略这些事件。

PipelineRun Queued：一个 PipelineRun 已被安排运行
PipelineRun Started：一个 PipelineRun 已经启动并且正在运行
PipelineRun Finished：一个 PipelineRun 已经完成它的执行，该事件将包含完成状态，成功，错误或失败
每个管道都被定义为一组要按顺序执行的任务，因此在某些情况下跟踪此顺序可能很重要。TaskRun 是在管道内定义的任务的实例，因为您可以预期管道的多次执行（每个 PipelineRun）您也可以预期任务的多次执行，因此我们使用 TaskRun 来引用这些实例之一.

TaskRun Started： PipelineRun 内的 TaskRun 已启动。
TaskRun Finished： PipelineRun 内的 TaskRun 已完成。
管道事件必须包括以下属性：

事件类型：类型限制为包含dev.cdevents.__前缀。例如dev.cdevents.pipelinerun.queued或dev.cdevents.tests.started
PipelineRun Id：管道执行的唯一标识符
管道名称：管道的唯一标识符，而不是实例的唯一标识符。一个管道可以有多个实例/运行。
PipelineRun Status : PipelineRun 在事件发出时的当前状态。如果管道已完成，此属性应反映它是成功完成还是执行时出错。可能的状态：[正在运行、已完成、错误]
可选属性：

PipelineRun URL：用于定位管道实例运行位置的 URL
PipelineRun Errors：指示可能的编译、测试、构建和打包错误的错误字段。


使用者：


贡献者：4
GitHub 星星：14

最新版本：No releases published

核心组件：


大牛发言：

历史：
CI/CD 工作组中的事件 最初是由CDF 互操作性特别兴趣小组成立的 ，其使命是标准化用于 CI/CD 流程的事件。该工作流后来演变为Event Special Interest Group，它定义了 CI/CD 事件的初始词汇，开发了一个 golang SDK 和第一个涉及Tekton和keepn的概念证明。
最初的词汇后来变成了CDEvents，一个新的独立CDF孵化项目。
 
 

参考文件：
